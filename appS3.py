# =============================================================================
# IMPORTA√á√ïES E CONFIGURA√á√ïES
# =============================================================================

import os
import io
import json
import glob
import uuid
import datetime
import numpy as np
import pandas as pd
import streamlit as st
from datetime import datetime
from shared.utils import (tokenizer, 
                          carregar_dados_s3,
                          salvar_dados_s3,
                          processar_curriculos_s3,
                          get_s3_client,
                          encerrar_vaga_s3,
                          reabrir_vaga_s3,
                          ler_jsons_s3)

from model.model import (calcular_fator_tecnico,
                         calcular_fator_idioma,
                         calcular_fator_salarial,
                         calcular_fator_engajamento,
                         calcular_fator_cultural,
                         calcular_fator_experiencia_final,
                         calcular_match_score)


# Configura√ß√£o da p√°gina
st.set_page_config(page_title="SeleAI - Sistema de Triagem", page_icon="ü§ñ", layout="wide")


# Sistema de arquivos
VAGAS_PATH = "vagas/"
CANDIDATOS_PATH = "candidatos/"
CURRICULOS_PATH = "curriculos/"
BUCKET_NAME = "meu-projeto-seleai-dados"

# =============================================================================
# LOGINS E AUTENTICA√á√ÉO
# =============================================================================

if "authenticated" not in st.session_state:
    st.session_state["authenticated"] = False

def login():
    st.sidebar.subheader("üîë Login")
    pwd = st.sidebar.text_input("Digite a senha:", type="password")
    if st.sidebar.button("Entrar"):
        if pwd == st.secrets["PASSWORD"]:
            st.session_state["authenticated"] = True
            st.sidebar.success("Login bem-sucedido!")
        else:
            st.sidebar.error("Senha incorreta")

# =============================================================================
# MENUS E P√ÅGINAS
# =============================================================================

def main():
    st.sidebar.title("üéØ SeleAI Navigation")
    page = st.sidebar.radio("Navega√ß√£o", ["üè† Dashboard", "üìä Resultados", "üìã Nova Vaga", "üë§ Novo Candidato"])

    # P√°ginas restritas
    restricted_pages = ["üè† Dashboard", "üìã Nova Vaga", "üìä Resultados"]

    if page in restricted_pages and not st.session_state["authenticated"]:
        st.warning("üîí √Årea restrita. Fa√ßa login para acessar.")
        login()
        return

    if page == "üè† Dashboard":
        show_dashboard()
    elif page == "üìã Nova Vaga":
        criar_vaga()
    elif page == "üìä Resultados":
        mostrar_resultados()
    elif page == "üë§ Novo Candidato":
        cadastrar_candidato()

# =============================================================================
# CONFIGURA√á√ïES DE DASHBOARD
# =============================================================================

def show_dashboard():
    st.title("üè† Dashboard SeleAI")
    
    # Carregar dados
    vagas = carregar_dados_s3(VAGAS_PATH)
    candidatos = carregar_dados_s3(CANDIDATOS_PATH)
    
    # M√©tricas
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        vagas_ativas = len([v for v in vagas if v.get('status') == 'ativa'])
        st.metric("Vagas Ativas", vagas_ativas)
    with col2:
        vagas_encerradas = len([v for v in vagas if v.get('status') == 'encerrada'])
        st.metric("Vagas Encerradas", vagas_encerradas)
    with col3:
        st.metric("Total Candidatos", len(candidatos))
    with col4:
        st.metric(
        "Matches Realizados",
        len([c for c in candidatos if c.get('score_match') and c['score_match'] >= 0.7])
)

    # Lista de vagas recentes (mais seguro converter datas)
    st.subheader("üìã Vagas Recentes")
    vagas_ordenadas = sorted(
        vagas,
        key=lambda x: (
            0 if x.get("status") != "ativa" else 1,
            x.get("data_abertura", "")
        ),
        reverse=True
    )[:5]

    for vaga in vagas_ordenadas:
        status = vaga.get('status', 'ativa')
        if status == 'encerrada':
            status_icon = "‚ùå"
            status_color = "red"
            status_text = "Encerrada"
        else:
            status_icon = "‚úÖ"
            status_color = "green"
            status_text = "Ativa"
        
        
        with st.expander(f"{status_icon} #{vaga['id']} - {vaga.get('titulo_vaga','(sem t√≠tulo)')} - {status_text}"):

            col1, col2 = st.columns(2)
            with col1:
                st.write(f"**Empresa:** {vaga.get('empresa_contratante', 'N/A')}")
                st.write(f"**N√≠vel:** {vaga.get('nivel_profissional', 'N/A')}")
                st.write(f"**Data Abertura:** {vaga.get('data_abertura', 'N/A')}")
                st.write(f"**Data Fechamento:** {vaga.get('data_fechamento', 'N/A')}")
                st.write(f"**Consultor:** {vaga.get('consultor_responsavel', 'N/A')}")
            
            with col2:
                candidatos_vaga = [c for c in candidatos if c.get('id_vaga') == vaga['id']]
    
                total_candidatos = len(candidatos_vaga)
                total_matches = len([c for c in candidatos_vaga if c.get('score_match') and c['score_match'] >= 0.7])
                
                melhor_candidato = None
                if candidatos_vaga:
                    melhor_candidato = max(candidatos_vaga, key=lambda c: c.get('score_match', 0))
                
                st.write(f"**Candidatos:** {total_candidatos}")
                st.write(f"**Matches:** {total_matches}")
                st.write(f"**Melhor candidato:** {melhor_candidato['codigo_candidato'] + ': ' + melhor_candidato['nome'] if melhor_candidato else 'N/A'}")
                st.markdown(
                    f"**Status:** <span style='color:{status_color}; font-weight:bold'>{status_text}</span>",
                    unsafe_allow_html=True
                )

            if status != 'encerrada':
                if st.button("‚ùå Encerrar Vaga", key=f"encerrar_{vaga['id']}"):
                    success, message = encerrar_vaga_s3(vaga['id'])
                    if success:
                        st.success(message)
                        st.experimental_rerun()
                    else:
                        st.error(message)
            else:
                if st.button("üîÑ Reabrir Vaga", key=f"reabrir_{vaga['id']}"):
                    success, message = reabrir_vaga_s3(vaga['id'])
                    if success:
                        st.success(message)
                        st.experimental_rerun()
                    else:
                        st.error(message)

# =============================================================================
# CRIAR VAGA
# =============================================================================

def criar_vaga():
    st.title("üìã Criar Nova Vaga")
    
    with st.form("form_vaga"):
        # Informa√ß√µes b√°sicas
        col1, col2 = st.columns(2)
        with col1:
            empresa = st.text_input("Empresa Contratante*")
            titulo_vaga = st.text_input("T√≠tulo da Vaga*")
            nivel = st.selectbox("N√≠vel Profissional*", ["Est√°gio","J√∫nior", "Pleno", "S√™nior", "Especialista"])
            modelo_trabalho = st.selectbox("Modelo de Trabalho*", ["Presencial", "H√≠brido", "Remoto"])
            area_atuacao = st.text_input("√Årea de Atua√ß√£o*")
        with col2:
            consultor = st.text_input("Consultor Respons√°vel*")
            email = st.text_input("Email do consultor*")
            solicitante = st.text_input("Solicitante*")
            contato = st.text_input("Contato*")
            prazo = st.text_input("Prazo de Contrata√ß√£o", "Indeterminado")
        
        # Tipo de contrata√ß√£o
        col3, col4 = st.columns(2)
        with col3:
            pcd = st.checkbox("Vaga espec√≠fica para PCD")

        with col4:
            tipo_contratacao = st.radio("Tipo de Contrata√ß√£o*", ["CLT", "PJ"])
            
        
        # Localiza√ß√£o
        st.subheader("üìç Localiza√ß√£o")
        col5, col6, col7 = st.columns(3)
        with col5:
            pais = st.text_input("Pa√≠s*", "Brasil")
        with col6:
            estado = st.text_input("Estado*")
        with col7:
            cidade = st.text_input("Cidade*")
        
        # Requisitos
        st.subheader("üéØ Requisitos da Vaga")
        col8, col9 = st.columns(2)
        with col8:
            nivel_academico = st.selectbox("N√≠vel Acad√™mico M√≠nimo*", 
                ["Ensino M√©dio", "T√©cnico", "Gradua√ß√£o", "P√≥s-gradua√ß√£o", "Mestrado", "Doutorado"])
            ingles = st.selectbox("Ingl√™s M√≠nimo", ["N√£o necess√°rio", "B√°sico", "Intermedi√°rio", "Avan√ßado", "Fluente"])
            espanhol = st.selectbox("Espanhol M√≠nimo", ["N√£o necess√°rio", "B√°sico", "Intermedi√°rio", "Avan√ßado", "Fluente"])
            viagens = st.checkbox("Disponibilidade para viagens")
        with col9:
            hab_comportamentais = st.text_area(
                "Habilidades Comportamentais* (separadas por v√≠rgula)",
                placeholder="Exemplo: Trabalho em equipe, Proatividade, Comunica√ß√£o, Lideran√ßa, Resili√™ncia, Flexibilidade, Pensamento cr√≠tico"
            )
            hab_tecnicas = st.text_area(
                "Habilidades T√©cnicas* (separadas por v√≠rgula)",
                placeholder="Exemplo: Python, SQL, Machine Learning, Power BI, Java, React, AWS, Docker"
            )
        
        # Or√ßamento e benef√≠cios
        st.subheader("üí∞ Remunera√ß√£o e Benef√≠cios")
        salario_min = st.number_input("Sal√°rio M√≠nimo (R$)*", min_value=0, value=3000)
        salario_max = st.number_input("Sal√°rio M√°ximo (R$)*", min_value=salario_min, value=6000)
        beneficios = st.text_area(
            "Benef√≠cios Oferecidos (separados por v√≠rgula, evite abrevia√ß√µes)",
            placeholder="Exemplo: Vale-refei√ß√£o, Vale-alimenta√ß√£o, Plano de sa√∫de, Plano odontol√≥gico, Vale-transporte, Gympass"
        )
        
        # Datas
        st.subheader("üìÖ Datas Importantes")
        data_fechamento = st.date_input("Data de Fechamento*")

        st.subheader("‚öñÔ∏è Pesos dos Fatores (0 a 10)")
        peso_tecnico = st.slider("Peso T√©cnico", 0, 10, 5)
        peso_cultural = st.slider("Peso Cultural", 0, 10, 2)
        peso_engajamento = st.slider("Peso Engajamento", 0, 10, 1)
        peso_idioma = st.slider("Peso Idioma", 0, 10, 1)
        peso_salarial = st.slider("Peso Salarial", 0, 10, 1)
        peso_experiencia = st.slider("Peso Experi√™ncia", 0, 10, 1)

        # Normalizar para que somem 100%
        soma_pesos = peso_tecnico + peso_cultural + peso_engajamento + peso_idioma + peso_salarial + peso_experiencia
        pesos = {
            "tecnico": peso_tecnico / soma_pesos,
            "cultural": peso_cultural / soma_pesos,
            "engajamento": peso_engajamento / soma_pesos,
            "idioma": peso_idioma / soma_pesos,
            "experiencia": peso_experiencia / soma_pesos,
            "salarial": peso_salarial / soma_pesos
            
}
        
        if st.form_submit_button("üíæ Salvar Vaga"):
            nova_vaga = {
                "id": str(uuid.uuid4())[:8],
                "data_abertura": datetime.now().strftime("%Y-%m-%d"),
                "data_fechamento": data_fechamento.strftime("%Y-%m-%d"),
                "consultor_responsavel": consultor,
                'email': email,
                "empresa_contratante": empresa,
                "informacao_nome_solicitante": solicitante,
                "contato_solicitante": contato,
                "titulo_vaga": titulo_vaga,
                "nivel_profissional": tokenizer(nivel),
                "tipo_contratacao": tipo_contratacao,
                "prazo_contratacao": prazo,
                "vaga_especifica_pcd": pcd,
                "area_atuacao": tokenizer(area_atuacao),
                "pais_vaga": pais,
                "estado_vaga": estado,
                "cidade_vaga": cidade,
                "modelo_trabalho": modelo_trabalho,
                "disponibilidade_viagens": viagens,
                "nivel_academico_min": nivel_academico,
                "nivel_ingles_min": ingles,
                "nivel_espanhol_min": espanhol,
                "hab_comportamentais": tokenizer(hab_comportamentais),
                "hab_tecnicas": tokenizer(hab_tecnicas),
                "beneficios": tokenizer(beneficios),
                "orcamento_salario": {"min": salario_min, "max": salario_max},
                "status": "ativa",
                "pesos": pesos
            }

            salvar_dados_s3(VAGAS_PATH, f"vaga_{nova_vaga['id']}.json", nova_vaga)
            st.success("‚úÖ Vaga criada com sucesso!")

# =============================================================================
# CADADASTRO DE CANDIDATO
# =============================================================================

def cadastrar_candidato():
    st.title("üë§ Cadastrar Candidato")
    
    vagas = carregar_dados_s3(VAGAS_PATH)
    vagas_ativas = [v for v in vagas if v.get('status') == 'ativa']
    
    if not vagas_ativas:
        st.warning("‚ùå N√£o h√° vagas ativas para candidatura.")
        return
    
    vaga_selecionada = st.selectbox(
        "Selecione a Vaga*", 
        options=vagas_ativas, 
        format_func=lambda x: f"#{x['id']} - {x['titulo_vaga']} - {x['empresa_contratante']}"
    )
    
    with st.form("form_candidato"):
        # Informa√ß√µes pessoais
        st.subheader("üë§ Informa√ß√µes Pessoais")
        col1, col2 = st.columns(2)
        with col1:
            nome = st.text_input("Nome Completo*")
            email = st.text_input("Email*")
            contato = st.text_input("Contato*")
        with col2:
            modelo_preferido = st.selectbox("Modelo de Trabalho Preferido*", ["Presencial", "H√≠brido", "Remoto"])
            tipo_contrato_pref = st.selectbox("Tipo de Contrato Preferido*", ["CLT", "PJ"])
            possui_def = st.checkbox("Possui defici√™ncia")
        
        # Localiza√ß√£o
        st.subheader("üìç Localiza√ß√£o")
        col3, col4, col5 = st.columns(3)
        with col3:
            pais = st.text_input("Pa√≠s*", "Brasil")
        with col4:
            estado = st.text_input("Estado*")
        with col5:
            cidade = st.text_input("Cidade*")
        
        # Forma√ß√£o e experi√™ncias
        st.subheader("üéì Forma√ß√£o e Experi√™ncia")
        col6, col7 = st.columns(2)
        with col6:
            nivel_academico = st.selectbox("N√≠vel Acad√™mico*", ["Ensino M√©dio", "T√©cnico", "Gradua√ß√£o", "P√≥s-gradua√ß√£o", "Mestrado", "Doutorado"])
            area_atuacao = st.text_input("√Åreas de Atua√ß√£o* (separadas por v√≠rgula)")
            tempo_experiencia = st.number_input("Tempo de Experi√™ncia (anos)*", min_value=0)
        with col7:
            nivel_ingles = st.selectbox("N√≠vel de Ingl√™s*", ["Nenhum", "B√°sico", "Intermedi√°rio", "Avan√ßado", "Fluente"])
            nivel_espanhol = st.selectbox("N√≠vel de Espanhol", ["Nenhum", "B√°sico", "Intermedi√°rio", "Avan√ßado", "Fluente"])
            viagens = st.checkbox("Disponibilidade para viagens")
        
        # Habilidades
        st.subheader("‚ö° Habilidades")
        hab_comportamentais = st.text_area(
            "Habilidades Comportamentais* (separadas por v√≠rgula)",
            placeholder="Exemplo: Trabalho em equipe, Proatividade, Comunica√ß√£o, Lideran√ßa, Resili√™ncia, Flexibilidade, Pensamento cr√≠tico"
        )
        hab_tecnicas = st.text_area(
            "Habilidades T√©cnicas* (separadas por v√≠rgula)",
            placeholder="Exemplo: Python, SQL, Machine Learning, Power BI, Java, React, AWS, Docker"
        )
        
        # Remunera√ß√£o
        st.subheader("üí∞ Remunera√ß√£o")
        col8, col9 = st.columns(2)
        with col8:
            ultimo_salario = st.number_input("√öltimo Sal√°rio (R$)", min_value=0)
            pretencao_salarial = st.number_input("Pretens√£o Salarial (R$)*", min_value=0)
        with col9:
            ultimos_beneficios = st.text_area(
                "Benef√≠cios Oferecidos (separados por v√≠rgula, evite abrevia√ß√µes)",
                placeholder="Exemplo: Vale-refei√ß√£o, Vale-alimenta√ß√£o, Plano de sa√∫de, Plano odontol√≥gico, Vale-transporte, Gympass"
            )
            
        # Upload de curr√≠culo
        uploaded_cv = st.file_uploader("üìé Anexar Curr√≠culo (PDF at√© 2MB)", type=["pdf"], key="cv")

        # BOT√ÉO DE ENVIO -> dentro do form
        submit = st.form_submit_button("üì§ Enviar Candidatura")

        if submit:
            novo_candidato = {
                "id_vaga": vaga_selecionada['id'],
                "nome": nome,
                "email": email.lower(),
                "contato": contato,
                "pais": pais,  
                "estado": estado,
                "cidade": cidade,
                "possui_def": possui_def,
                "modelo_trabalho": modelo_preferido,  
                "tipo_contrato": tipo_contrato_pref,
                "disponibilidade_viagens": viagens,
                "nivel_academico": nivel_academico,  
                "areas_atuacao": tokenizer(area_atuacao),
                "tempo_experiencia": tempo_experiencia,
                "nivel_ingles": nivel_ingles,  
                "nivel_espanhol": nivel_espanhol,  
                "hab_comportamentais": tokenizer(hab_comportamentais),
                "hab_tecnicas": tokenizer(hab_tecnicas),
                "ultimo_salario": ultimo_salario,
                "ultimo_beneficio": tokenizer(ultimos_beneficios),
                "pretencao_salarial": pretencao_salarial,
                "data_candidatura": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }
            novo_candidato['codigo_candidato'] = f"CAND{hash(email.lower()) % 10000:04d}"

            # Salvar curr√≠culo
            if uploaded_cv is not None:
                if uploaded_cv.size > 2 * 1024 * 1024:  # 2MB
                    st.error("‚ùå O arquivo √© muito grande. M√°ximo 2MB.")
                    return
                cv_filename = f"curriculo_{novo_candidato['codigo_candidato'].replace('@','_')}_{vaga_selecionada['id']}.pdf"
                
                s3_client = get_s3_client()
                try:
                    s3_client.upload_fileobj(uploaded_cv, st.secrets["S3_BUCKET_NAME"], CURRICULOS_PATH + cv_filename)
                except Exception as e:
                    st.error(f"Erro ao fazer upload do curr√≠culo: {e}")
                    return
                
                novo_candidato["cv_file"] = cv_filename
            else:
                novo_candidato["cv_file"] = ""

            # Calcular score
            score = calcular_match_score(novo_candidato, vaga_selecionada, vaga_selecionada['pesos'])
            novo_candidato['score_match'] = score

            fatores = {
                'salarial': calcular_fator_salarial(novo_candidato, vaga_selecionada),
                'engajamento': calcular_fator_engajamento(novo_candidato, vaga_selecionada),
                'cultural': calcular_fator_cultural(novo_candidato, vaga_selecionada),
                'tecnico': calcular_fator_tecnico(novo_candidato, vaga_selecionada),
                'idioma': calcular_fator_idioma(novo_candidato, vaga_selecionada),
                'experiencia': calcular_fator_experiencia_final(novo_candidato, vaga_selecionada)
            }

            novo_candidato['fatores'] = fatores

            salvar_dados_s3(
                CANDIDATOS_PATH, 
                f"candidato_{novo_candidato['codigo_candidato']}_{vaga_selecionada['id']}.json", 
                novo_candidato
            )
            st.success(f"‚úÖ Candidatura enviada! Score de match: {score:.2%}, {fatores}")

# =============================================================================
# RESULTADOS E MATCHMAKING
# =============================================================================

def mostrar_resultados():
    st.title("üìä Resultados e Matchmaking")
    
    # Carregue os dados de todas as vagas e candidatos (uma √∫nica vez)
    # Certifique-se de que carregar_dados_s3() retorna a lista completa
    vagas = carregar_dados_s3(VAGAS_PATH)
    candidatos = carregar_dados_s3(CANDIDATOS_PATH)
    
    vagas_ordenadas = sorted(
        vagas, 
        key=lambda x: 0 if x.get('status') == 'ativa' else 1
    )

    vaga_selecionada = st.selectbox(
        "Selecione a Vaga para An√°lise", 
        options=vagas_ordenadas, 
        format_func=lambda x: f"#{x['id']} - {x['titulo_vaga']} - {'‚ùå Encerrada' if x.get('status') != 'ativa' else '‚úÖ Ativa'}"
    )
        
    def atualizar_e_salvar_candidato(candidato_data, novo_status, comentario):
        if 'historico_status' not in candidato_data:
            candidato_data['historico_status'] = []
            
        filename = f"candidato_{candidato_data['codigo_candidato']}_{candidato_data['id_vaga']}.json"

        candidato_data['historico_status'].append({
            'data': datetime.now().isoformat(),
            'status': novo_status,
            'comentario': comentario,
            'vaga_id': candidato_data['id_vaga']
        })
        
        candidato_data['status_atual'] = novo_status 
        
        # Chame a fun√ß√£o de salvamento do S3
        salvar_dados_s3(CANDIDATOS_PATH, filename, candidato_data)
        
        st.experimental_rerun()
        
    if vaga_selecionada:
        candidatos_vaga = [c for c in candidatos if c.get('id_vaga') == vaga_selecionada['id']]
        
        st.subheader(f"Candidatos para Vaga #{vaga_selecionada['id']}")
        st.write(f"**Total de candidatos:** {len(candidatos_vaga)}")
        
        if candidatos_vaga:
            candidatos_vaga.sort(key=lambda x: x.get('score_match', 0), reverse=True)
            
            for i, candidato in enumerate(candidatos_vaga, 1):
                status_atual = candidato.get('status_atual', 'Pendente')
                status_icon = 'üü°' if status_atual == 'Pendente' else ('‚úÖ' if status_atual == 'Qualificado' else '‚ùå')
                
                expander_label = (
                    f"#{i} - {candidato['nome']} - Score: {candidato.get('score_match', 0):.2%} - Status: **{status_icon} {status_atual}**"
                )
                
                with st.expander(expander_label):
                    # ... (resto das informa√ß√µes do candidato) ...
                    col1, col2 = st.columns(2)
                    with col1:
                        st.write(f"**Email:** {candidato['email']}")
                        st.write(f"**Contato:** {candidato['contato']}")
                        st.write(f"**√Årea:** {candidato['areas_atuacao']}")
                        st.write(f"**Experi√™ncia:** {candidato['tempo_experiencia']} anos")
                    with col2:
                        st.write(f"**Ingl√™s:** {candidato['nivel_ingles']}")
                        st.write(f"**Pretens√£o:** R$ {candidato['pretencao_salarial']:,.2f}")
                        st.write(f"**Modelo Trabalho:** {candidato['modelo_trabalho']}")
                        st.write(f"**Fatores de avalia√ß√£o:** {candidato['fatores']}")
                        
                    st.markdown("---")
                    
                    comentario_key = f"comentario_{candidato['codigo_candidato']}_{vaga_selecionada['id']}"
                    comentario = st.text_area("Adicionar Coment√°rios", key=comentario_key)
                    
                    st.markdown("""
                        <style>
                        div[data-testid="column"] button {
                            width: 100% !important;
                        }
                        </style>
                    """, unsafe_allow_html=True)

                    col_b1, col_b2 = st.columns(2)

                    with col_b1:
                        if st.button("‚úÖ Qualificar", key=f"qualify_{i}"):
                            if comentario.strip() == "":
                                st.warning("Por favor, adicione um coment√°rio antes de qualificar.")
                            else:
                                atualizar_e_salvar_candidato(candidato, "Qualificado", comentario)

                    with col_b2:
                        if st.button("‚ùå Desqualificar", key=f"disqualify_{i}"):
                            if comentario.strip() == "":
                                st.warning("Por favor, adicione um coment√°rio antes de desqualificar.")
                            else:
                                atualizar_e_salvar_candidato(candidato, "Desqualificado", comentario)
                    
                    if 'historico_status' in candidato:
                        st.markdown("**Hist√≥rico de Avalia√ß√µes:**")
                        historico_vaga = [h for h in candidato['historico_status'] if h.get('vaga_id') == vaga_selecionada['id']]
                        for hist in historico_vaga:
                            data = datetime.fromisoformat(hist['data']).strftime('%d/%m/%Y %H:%M') 
                            st.info(f"[{data}] Status: **{hist['status']}** | Coment√°rio: *{hist['comentario']}*")

    # BLOCO DE EXPORTA√á√ÉO GERAL
    st.markdown("---")
    
    # Use a fun√ß√£o ler_jsons mais robusta
    df_candidatos = ler_jsons_s3(CANDIDATOS_PATH)
    df_vagas = ler_jsons_s3(VAGAS_PATH)

    # Certifique-se de que os DataFrames n√£o est√£o vazios antes do merge
    if not df_candidatos.empty and not df_vagas.empty:
        df_final = pd.merge(
            df_candidatos,
            df_vagas,
            left_on="id_vaga",
            right_on="id",
            how="left",
            suffixes=("_candidato", "_vaga")
        )
        
        # Processar curr√≠culos e fazer merge
        df_curriculos = processar_curriculos_s3(CURRICULOS_PATH)
        if not df_curriculos.empty:
            df_final = pd.merge(
                df_final, 
                df_curriculos, 
                on="codigo_candidato", 
                how="left" 
            )
        
        # Converta o DataFrame para um objeto em mem√≥ria
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            df_final.to_excel(writer, index=False, sheet_name='Resultados')
        processed_data = output.getvalue()

        # Crie o bot√£o de download
        st.download_button(
            label="üì• Baixar dados para Excel",
            data=processed_data,
            file_name="dados_matchmaking.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            key="download_excel_button"
        )
    else:
        st.warning("N√£o h√° dados de vagas ou candidatos para exportar.")
                

if __name__ == "__main__":
    main()